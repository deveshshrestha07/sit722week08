name: Backend CI - Test, Build and Push Images to ACR

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "backend/**"
      - ".github/workflows/backend_ci.yml"

env:
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5
        ports: [ "5432:5432" ]

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5
        ports: [ "5433:5432" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r backend/product_service/requirements.txt
          pip install -r backend/order_service/requirements.txt
          pip install pytest httpx

      - name: Run tests - product_service
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q

      - name: Run tests - order_service
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Azure auth & context ---------------------------------------------
      - name: Validate AZURE_CREDENTIALS secret
        shell: bash
        run: |
          if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
            echo "::error::AZURE_CREDENTIALS secret is missing." >&2
            exit 1
          fi

      - name: Azure login (Service Principal JSON)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          allow-no-subscriptions: true
          environment: AzureCloud

      - name: Select subscription & show context
        shell: bash
        run: |
          set -e
          SUB_ID="${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}"
          if [ -z "$SUB_ID" ]; then
            echo "::error::subscriptionId missing in AZURE_CREDENTIALS JSON." >&2
            exit 1
          fi
          az account set --subscription "$SUB_ID"
          az account show --query "{subscriptionId:id, tenantId:tenantId, name:name}"

      # --- ACR discovery & login --------------------------------------------
      - name: Resolve ACR login server
        id: acr
        shell: bash
        run: |
          set -e
          if [ -n "${{ secrets.ACR_LOGIN_SERVER }}" ]; then
            SERVER="${{ secrets.ACR_LOGIN_SERVER }}"
            NAME="${SERVER%%.*}"
          else
            if [ -z "${{ secrets.ACR_NAME }}" ]; then
              echo "::error::Set either ACR_LOGIN_SERVER or ACR_NAME in repo Secrets." >&2
              exit 1
            fi
            NAME="${{ secrets.ACR_NAME }}"
            SERVER="$(az acr show -n "$NAME" --query loginServer -o tsv)"
          fi
          echo "name=$NAME"     >> "$GITHUB_OUTPUT"
          echo "server=$SERVER" >> "$GITHUB_OUTPUT"
          echo "Using ACR: $NAME ($SERVER)"

      - name: ACR login
        run: az acr login --name "${{ steps.acr.outputs.name }}"

      # --- Build & push ------------------------------------------------------
      - name: Build & push product image
        run: |
          REG="${{ steps.acr.outputs.server }}"
          docker build -t "$REG/product_service:${{ env.IMAGE_TAG }}" backend/product_service
          docker push "$REG/product_service:${{ env.IMAGE_TAG }}"

      - name: Build & push order image
        run: |
          REG="${{ steps.acr.outputs.server }}"
          docker build -t "$REG/order_service:${{ env.IMAGE_TAG }}" backend/order_service
          docker push "$REG/order_service:${{ env.IMAGE_TAG }}"

      - name: Logout
        if: always()
        run: az logout
