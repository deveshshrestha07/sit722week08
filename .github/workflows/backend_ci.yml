# week08/.github/workflows/backend_ci.yml

name: Backend CI - Test, Build and Push Images to ACR

# Trigger the workflow
on:
  # Manual trigger
  workflow_dispatch:

  # Automatically on pushes to main branch
  push:
    branches:
      - main
    paths: # Only trigger if changes are in backend directories
      - 'backend/**'
      - '.github/workflows/backend_ci.yml' # Trigger if this workflow file changes

# Define global environment variables that can be used across jobs
env:
  # ACR name and login server are stored as GitHub secrets
  ACR_NAME: ${{ secrets.ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}

  # Dynamically generate image tags based on Git SHA and GitHub Run ID
  # This provides unique, traceable tags for each image build
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  # Job 1: Run tests and linting for all backend services
  test_and_lint_backends:
    runs-on: ubuntu-latest # Use a GitHub-hosted runner

    # Define services (Postgres DBs) for testing
    services:
      # Product DB container
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      # Order DB container
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      # 1. Checkout the repository code to the runner
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3. Install dependencies for each backend service
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx # Install testing tools

      # 4. Run tests for product_service
      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      # 5. Run tests for order_service
      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  # Job 2: Build and Push Docker Images (runs only if tests pass)
  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends # Only runs if tests succeed

    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Azure login using Service Principal
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 3. Login to Azure Container Registry (ACR)
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}

          # 4. Build and push Product Service image
      - name: Build and Push Product Service Image
        shell: bash
        working-directory: backend/product_service
        run: |
          # sanitize registry (strip CR/LF and trailing slash)
          REGISTRY="$(printf "%s" "${{ env.ACR_LOGIN_SERVER }}" | tr -d '\r\n')"
          REGISTRY="${REGISTRY%/}"
          echo "Building to $REGISTRY/product_service:latest"
          docker build -t "${REGISTRY}/product_service:latest" .
          docker push "${REGISTRY}/product_service:latest"

      # 5. Build and push Order Service image
      - name: Build and Push Order Service Image
        shell: bash
        working-directory: backend/order_service
        run: |
          REGISTRY="$(printf "%s" "${{ env.ACR_LOGIN_SERVER }}" | tr -d '\r\n')"
          REGISTRY="${REGISTRY%/}"
          echo "Building to $REGISTRY/order_service:latest"
          docker build -t "${REGISTRY}/order_service:latest" .
          docker push "${REGISTRY}/order_service:latest"

      # 6. Logout from Azure (always run for security)
      - name: Logout from Azure
        if: always()
        run: az logout
