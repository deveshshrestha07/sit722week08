name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: "Name of the AKS Cluster to deploy to"
        required: true
        default: "aks-sit722-08"
      aks_resource_group:
        description: "Resource Group of the AKS Cluster"
        required: true
        default: "rg-sit722-08"
      aks_acr_name:
        description: "Name of ACR"
        required: true
        default: "sit722acr27253"

# harmless if using SP JSON; required if you later switch to OIDC
permissions:
  id-token: write
  contents: read

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Single fail-fast check (no 'if:' needed anywhere else)
      - name: âœ… Validate AZURE_CREDENTIALS exists
        run: |
          if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
            echo "AZURE_CREDENTIALS secret is missing or empty." >&2
            exit 1
          fi

      - name: Azure login (Service Principal JSON)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group "${{ github.event.inputs.aks_resource_group }}" \
            --name "${{ github.event.inputs.aks_cluster_name }}" \
            --overwrite-existing

      # Optional: Attach ACR if not already attached
      # - name: Attach ACR
      #   run: |
      #     az aks update \
      #       --name "${{ github.event.inputs.aks_cluster_name }}" \
      #       --resource-group "${{ github.event.inputs.aks_resource_group }}" \
      #       --attach-acr "${{ github.event.inputs.aks_acr_name }}"

      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          set -euo pipefail
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-db.yaml

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          set -euo pipefail
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml

      - name: Wait for Backend LoadBalancer IPs
        run: |
          set -euo pipefail
          PRODUCT_IP=""
          ORDER_IP=""
          for i in $(seq 1 60); do
            echo "Attempt $i/60 to get IPs..."
            PRODUCT_IP=$(kubectl get service product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)
            ORDER_IP=$(kubectl  get service order-service-w08e1  -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "Product Service IP: $PRODUCT_IP"
              echo "Order Service IP: $ORDER_IP"
              break
            fi
            sleep 5
          done
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: One or more LoadBalancer IPs not assigned after timeout."
            kubectl get svc
            exit 1
          fi
          echo "PRODUCT_IP=$PRODUCT_IP" >> "$GITHUB_ENV"
          echo "ORDER_IP=$ORDER_IP"     >> "$GITHUB_ENV"

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> "$GITHUB_OUTPUT"

      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> "$GITHUB_OUTPUT"

      - name: Logout from Azure
        run: az logout
