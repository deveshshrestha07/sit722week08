name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_url:
        description: "Product API base URL (e.g., http://X.X.X.X:8000)"
        required: true
        default: "http://<ip_address>:8000"
      order_api_url:
        description: "Order API base URL (e.g., http://Y.Y.Y.Y:8001)"
        required: true
        default: "http://<ip_address>:8001"
      aks_cluster_name:
        description: "AKS cluster name"
        required: true
        default: "aks-sit722-08"
      aks_resource_group:
        description: "AKS resource group"
        required: true
        default: "rg-sit722-08"
      image_tag:
        description: "Frontend image tag to build/push/deploy"
        required: true
        default: "manual"

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    env:
      ACR_NAME: sit722acr27253

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate AZURE_CREDENTIALS is present
        shell: bash
        run: |
          if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
            echo "AZURE_CREDENTIALS secret is missing or empty." >&2
            exit 1
          fi

      - name: Azure login (Service Principal JSON)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Resolve ACR login server
        shell: bash
        run: |
          set -e
          ACR_LOGIN_SERVER=$(az acr show -n "$ACR_NAME" --query loginServer -o tsv)
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" | tee -a "$GITHUB_ENV"
          echo "Using ACR: $ACR_LOGIN_SERVER"

      - name: Login to Azure Container Registry
        run: az acr login --name "$ACR_NAME"

      - name: Inject backend URLs into frontend/main.js
        shell: bash
        run: |
          set -euo pipefail
          FILE="frontend/main.js"
          PROD="${{ inputs.product_api_url }}"
          ORD="${{ inputs.order_api_url }}"

          if grep -q "_PRODUCT_API_URL_" "$FILE" || grep -q "_ORDER_API_URL_" "$FILE"; then
            sed -i "s|_PRODUCT_API_URL_|${PROD}|g" "$FILE"
            sed -i "s|_ORDER_API_URL_|${ORD}|g"  "$FILE"
            echo "Replaced placeholders in $FILE"
          elif grep -q "const[[:space:]]\+PRODUCT_API_BASE_URL" "$FILE" || grep -q "const[[:space:]]\+ORDER_API_BASE_URL" "$FILE"; then
            sed -i "s|const[[:space:]]\+PRODUCT_API_BASE_URL[[:space:]]*=.*|const PRODUCT_API_BASE_URL = '${PROD}';|g" "$FILE"
            sed -i "s|const[[:space:]]\+ORDER_API_BASE_URL[[:space:]]*=.*|const ORDER_API_BASE_URL   = '${ORD}';|g" "$FILE"
            echo "Updated existing consts in $FILE"
          else
            tmp="$(mktemp)"
            {
              echo "const PRODUCT_API_BASE_URL = '${PROD}';"
              echo "const ORDER_API_BASE_URL   = '${ORD}';"
              cat "$FILE"
            } > "$tmp"
            mv "$tmp" "$FILE"
            echo "Prepended consts to $FILE"
          fi

          echo "---- main.js (first 120 lines) ----"
          nl -ba "$FILE" | sed -n '1,120p'

      - name: Build & Push frontend image
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ inputs.image_tag }}"
          docker build -t "$ACR_LOGIN_SERVER/frontend:$TAG" ./frontend
          docker push "$ACR_LOGIN_SERVER/frontend:$TAG"

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ inputs.aks_resource_group }}
          cluster-name:   ${{ inputs.aks_cluster_name }}

      - name: Apply frontend manifest
        shell: bash
        run: |
          set -euo pipefail
          # If your manifest lives elsewhere, fix the path here:
          kubectl apply -f k8s/frontend.yaml

      - name: Discover deployment & container names (by label app=frontend)
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          DEPLOY=$(kubectl get deploy -l app=frontend -o jsonpath='{.items[0].metadata.name}')
          if [ -z "$DEPLOY" ]; then
            echo "No deployment with label app=frontend found." >&2
            kubectl get deploy -o wide || true
            exit 1
          fi
          CONTAINER=$(kubectl get deploy "$DEPLOY" -o jsonpath='{.spec.template.spec.containers[0].name}')
          echo "DEPLOY=$DEPLOY"       | tee -a "$GITHUB_ENV"
          echo "CONTAINER=$CONTAINER" | tee -a "$GITHUB_ENV"
          echo "Detected deployment: $DEPLOY ; container: $CONTAINER"

      - name: Update image & wait for rollout
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ inputs.image_tag }}"
          kubectl set image deployment/"$DEPLOY" "$CONTAINER"="$ACR_LOGIN_SERVER/frontend:$TAG"
          kubectl rollout status deployment/"$DEPLOY" --timeout=300s
          kubectl get deploy,po,svc -o wide

      - name: Logout
        run: az logout
