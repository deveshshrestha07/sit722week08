name: Deploy to Dev

on:
  push:
    branches: [ development ]
    paths:
      - "backend/**"
      - "k8s/**"
      - ".github/workflows/**"

permissions:
  id-token: write
  contents: read

env:
  IMAGE_TAG: dev-${{ github.sha }}

jobs:
  ci_first:
    uses: ./.github/workflows/reusable-ci.yml

  build_and_push:
    needs: ci_first
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Select subscription
        run: |
          az account set --subscription "${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}"
          az account show --query "{subscriptionId:id,name:name}"

      - name: Resolve ACR login server
        id: acr
        run: |
          if [ -n "${{ secrets.ACR_LOGIN_SERVER }}" ]; then
            echo "server=${{ secrets.ACR_LOGIN_SERVER }}" >> "$GITHUB_OUTPUT"
            echo "name=${{ secrets.ACR_LOGIN_SERVER%%.* }}" >> "$GITHUB_OUTPUT"
          else
            NAME="${{ secrets.ACR_NAME }}"
            SERVER="$(az acr show -n "$NAME" --query loginServer -o tsv)"
            echo "server=$SERVER" >> "$GITHUB_OUTPUT"
            echo "name=$NAME"    >> "$GITHUB_OUTPUT"
          fi
          echo "ACR Server: ${{ steps.acr.outputs.server }}"

      - name: ACR login
        run: az acr login -n "${{ steps.acr.outputs.name }}"

      - name: Build & push product image
        run: |
          REG="${{ steps.acr.outputs.server }}"
          docker build -t "$REG/product_service:${{ env.IMAGE_TAG }}" backend/product_service
          docker push "$REG/product_service:${{ env.IMAGE_TAG }}"

      - name: Build & push order image
        run: |
          REG="${{ steps.acr.outputs.server }}"
          docker build -t "$REG/order_service:${{ env.IMAGE_TAG }}" backend/order_service
          docker push "$REG/order_service:${{ env.IMAGE_TAG }}"

  deploy_to_aks:
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS context
        run: |
          az aks get-credentials \
            -g "${{ secrets.AZURE_RESOURCE_GROUP }}" \
            -n "${{ secrets.AKS_CLUSTER_NAME }}" \
            --overwrite-existing

      - name: Render images in manifests (dev tag)
        shell: bash
        run: |
          set -e
          REG="${{ secrets.ACR_LOGIN_SERVER || '' }}"
          if [ -z "$REG" ]; then
            REG="$(az acr show -n "${{ secrets.ACR_NAME }}" --query loginServer -o tsv)"
          fi
          sed -i "s|image: .*/product_service:.*|image: $REG/product_service:${{ env.IMAGE_TAG }}|g" k8s/product-service.yaml
          sed -i "s|image: .*/order_service:.*|image: $REG/order_service:${{ env.IMAGE_TAG }}|g"   k8s/order-service.yaml
          echo "Images updated to dev tag: ${{ env.IMAGE_TAG }}"

      - name: Apply manifests
        run: |
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-db.yaml
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml

      - name: Show services
        run: kubectl get svc
